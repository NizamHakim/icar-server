// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model IcarRoute {
  id                 Int                 @id @default(autoincrement())
  name               String              @unique
  color              String
  icars              Icar[]
  routeStopWaypoints RouteStopWaypoint[]
}

model IcarStop {
  id                 Int                 @id @default(autoincrement())
  name               String              @unique
  coordinate         Json
  routeStopWaypoints RouteStopWaypoint[]
  schedules          Schedule[]
}

model RouteStopWaypoint {
  id          Int       @id @default(autoincrement())
  icarRouteId Int
  icarStopId  Int
  order       Int
  icarRoute   IcarRoute @relation(fields: [icarRouteId], references: [id])
  icarStop    IcarStop  @relation(fields: [icarStopId], references: [id])
}

enum IcarStatus {
  ACTIVE
  INACTIVE
}

model Icar {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  capacity    Int
  status      IcarStatus @default(ACTIVE)
  icarRouteId Int
  icarRoute   IcarRoute  @relation(fields: [icarRouteId], references: [id])
  schedules   Schedule[]
}

enum ScheduleSession {
  SESSION_1
  SESSION_2
}

model Schedule {
  id          Int             @id @default(autoincrement())
  session     ScheduleSession
  arrivalTime DateTime
  icarId      Int
  icarStopId  Int
  icar        Icar            @relation(fields: [icarId], references: [id])
  icarStop    IcarStop        @relation(fields: [icarStopId], references: [id])
  tickets     Ticket[]
}

model User {
  id       Int      @id @default(autoincrement())
  name     String
  email    String   @unique
  password String
  tickets  Ticket[]
}

enum TicketStatus {
  FINISHED
  CANCELED
  IN_QUEUE
}

model Ticket {
  id         Int          @id @default(autoincrement())
  expiredAt  DateTime
  status     TicketStatus @default(IN_QUEUE)
  userId     Int
  scheduleId Int
  user       User         @relation(fields: [userId], references: [id])
  schedule   Schedule     @relation(fields: [scheduleId], references: [id])
  review     Json?
}
